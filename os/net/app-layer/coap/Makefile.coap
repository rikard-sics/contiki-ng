MAKE_WITH_DTLS ?= 0
MAKE_WITH_OSCORE ?= 0
MAKE_WITH_GROUPCOM ?= 0
MAKE_WITH_HW_CRYPTO ?= 0
MAKE_WITH_ES256 ?= 1

#For unicast OSCORE
ifeq ($(strip $(MAKE_WITH_OSCORE)),1)
 
 CFLAGS += -DWITH_OSCORE=1
 MODULES += os/net/app-layer/coap/oscore-support
 
 #We need tinydtls for the SHA-256 implementation.
 TINYDTLS_PATH := os/net/security/tinydtls
 ifeq (${wildcard $(CONTIKI)/$(TINYDTLS_PATH)/Makefile},)
  ${error Could not find the tinyDTLS submodule. Please run "git submodule update --init" and try again}
 endif
  
  #Comment out #include "tinydtls.h" from tinydtls/sha2/sha2.h because OSCORE does not build with it. This is a hack and should probably be done in a better way. "\\\#" escape the pound sign for Make.
  SHA2_PATH := $(CONTIKI)/$(TINYDTLS_PATH)/sha2/sha2.c
  SED_RES:= $(shell sed -i 's/\\\#include \"tinydtls.h\"/\/\/include tinydtls.h/g' $(SHA2_PATH)  )

  #HW/SW Crypto configurations for Simpleink 
  ifeq ($(TARGET), simplelink)
  ifeq ($(strip $(MAKE_WITH_HW_CRYPTO)),1)
    CFLAGS += -DOSCORE_WITH_HW_CRYPTO=1
    MODULES += arch/cpu/simplelink-cc13xx-cc26xx/lib/coresdk_cc13xx_cc26xx/source/ti/devices/cc13x2_cc26x2/
    MODULES += arch/cpu/simplelink-cc13xx-cc26xx/lib/coresdk_cc13xx_cc26xx/source
  else  #With SW Crypto
    #Use software AES-CCM implementation.
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    MODULES += os/net/security/tinydtls/sha2
    CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
    
  endif #MAKE_WITH_HW_CRYPTO
  endif #Simpleink
 
  #HW/SW Crypto configurations for Zoul 
  ifeq ($(TARGET), zoul)
  ifeq ($(strip $(MAKE_WITH_HW_CRYPTO)),1)
    CFLAGS += -DOSCORE_WITH_HW_CRYPTO=1
    #Force Zoul to use HW crypto
    CFLAGS += -DCCM_STAR_CONF=cc2538_ccm_star_driver
  else  #With SW Crypto
    #Force Zoul to use SW crypto
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    MODULES += os/net/security/tinydtls/sha2
    CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
    
  endif #MAKE_WITH_HW_CRYPTO
  endif #Zoul
  
  #SW Crypto configurations for Native
  ifeq ($(TARGET), native)
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    MODULES += os/net/security/tinydtls/sha2
    CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
  endif #Native

else ifeq ($(MAKE_WITH_DTLS),1)

 TINYDTLS_PATH := os/net/security/tinydtls

 ifeq (${wildcard $(CONTIKI)/$(TINYDTLS_PATH)/Makefile},)
  ${error Could not find the tinyDTLS submodule. Please run "git submodule update --init" and try again}
 endif

 CFLAGS += -DWITH_DTLS=1

 MODULES += os/net/app-layer/coap/tinydtls-support
 MODULES += $(TINYDTLS_PATH) ${addprefix $(TINYDTLS_PATH)/,aes sha2 ecc}

 MAKE_COAP_DTLS_KEYSTORE_NONE   := 0
 MAKE_COAP_DTLS_KEYSTORE_SIMPLE := 1
 MAKE_COAP_DTLS_KEYSTORE_LWM2M  := 2

 MAKE_COAP_DTLS_KEYSTORE ?= MAKE_COAP_DTLS_KEYSTORE_LWM2M

 ifeq ($(MAKE_COAP_DTLS_KEYSTORE),MAKE_COAP_DTLS_KEYSTORE_SIMPLE)
  CFLAGS += -DCOAP_DTLS_KEYSTORE_CONF_WITH_SIMPLE=1
 else ifeq ($(MAKE_COAP_DTLS_KEYSTORE),MAKE_COAP_DTLS_KEYSTORE_LWM2M)
  CFLAGS += -DCOAP_DTLS_KEYSTORE_CONF_WITH_LWM2M=1
 else ifeq ($(MAKE_COAP_DTLS_KEYSTORE),MAKE_COAP_DTLS_KEYSTORE_NONE)
  # No C flag needed for no keystore
 else
  ${error Unsupported CoAP DTLS keystore: $(MAKE_COAP_DTLS_KEYSTORE)}
 endif
endif 

#For Group-OSCORE
ifeq ($(strip $(MAKE_WITH_GROUPCOM)),1)
  CFLAGS += -DWITH_GROUPCOM=1
 
ifeq ($(strip $(MAKE_WITH_OSCORE)),1)
  #only configure crypto when OSCORE is also used
  
  #HW/SW Crypto configurations for Simpleink 
  ifeq ($(TARGET), simplelink)
  ifeq ($(strip $(MAKE_WITH_HW_CRYPTO)),1)
    CFLAGS += -DOSCORE_WITH_HW_CRYPTO=1
    MODULES += arch/cpu/simplelink-cc13xx-cc26xx/lib/coresdk_cc13xx_cc26xx/source/ti/devices/cc13x2_cc26x2/
    MODULES += arch/cpu/simplelink-cc13xx-cc26xx/lib/coresdk_cc13xx_cc26xx/source
    ifeq ($(strip $(MAKE_WITH_ES256)),1)
      CFLAGS += -DWITH_ES256
    else
      ${error EDDSA25519 is not supported in hardware on this platform.} 
    endif #MAKE_WITH_ES256
  else  #With SW Crypto
    #Use software AES-CCM implementation.
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    MODULES += os/net/security/tinydtls/sha2
    CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
    ifeq ($(strip $(MAKE_WITH_ES256)),1)
      #uECC software configuration.
      MODULES += os/net/app-layer/coap/oscore-support/uecc 
      CFLAGS += -DWATCHDOG_CONF_ENABLE=0
      CFLAGS += -DuECC_PLATFORM=uECC_arm_thumb2
      CFLAGS += -DuECC_ASM=uECC_asm_fast
      CFLAGS += -DuECC_SQUARE_FUNC=1
      CFLAGS += -DuECC_OPTIMIZATION_LEVEL=3
      CFLAGS += -DuECC_SUPPORTS_secp160r1=0
      CFLAGS += -DuECC_SUPPORTS_secp192r1=0
      CFLAGS += -DuECC_SUPPORTS_secp224r1=0
      CFLAGS += -DuECC_SUPPORTS_secp256k1=0
      CFLAGS += -DuECC_SUPPORTS_secp256r1=1
      CFLAGS += -DuECC_SUPPORT_COMPRESSED_POINT=0
      CFLAGS += -DWITH_ES256
    else #With EDDSA25519
      MODULES += os/net/app-layer/coap/oscore-support/monocypher 
      CFLAGS += -DWATCHDOG_CONF_ENABLE=0
      CFLAGS += -DWITH_ED25519
    endif # MAKE_WITH_ES256
  endif #MAKE_WITH_HW_CRYPTO
  endif #Simpleink

 
  #HW/SW Crypto configurations for Zoul 
  ifeq ($(TARGET), zoul)
  ifeq ($(strip $(MAKE_WITH_HW_CRYPTO)),1)
    CFLAGS += -DOSCORE_WITH_HW_CRYPTO=1
    #Force Zoul to use HW crypto
    CFLAGS += -DCCM_STAR_CONF=cc2538_ccm_star_driver
    CFLAGS += -DWATCHDOG_CONF_ENABLE=0
    ifeq ($(strip $(MAKE_WITH_ES256)),1)
      CFLAGS += -DWITH_ES256
    else
      ${error EDDSA25519 is not supported in hardware on this platform.} 
    endif #MAKE_WITH_ES256
  else  #With SW Crypto
    #Force Zoul to use SW crypto
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    
    MODULES += os/net/security/tinydtls/sha2
    CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
    ifeq ($(strip $(MAKE_WITH_ES256)),1)
      #uECC software configuration.
      MODULES += os/net/app-layer/coap/oscore-support/uecc 
      CFLAGS += -DWATCHDOG_CONF_ENABLE=0
      CFLAGS += -DuECC_PLATFORM=uECC_arm_thumb2
      CFLAGS += -DuECC_ASM=uECC_asm_fast
      CFLAGS += -DuECC_SQUARE_FUNC=1
      CFLAGS += -DuECC_OPTIMIZATION_LEVEL=3
      CFLAGS += -DuECC_SUPPORTS_secp160r1=0
      CFLAGS += -DuECC_SUPPORTS_secp192r1=0
      CFLAGS += -DuECC_SUPPORTS_secp224r1=0
      CFLAGS += -DuECC_SUPPORTS_secp256k1=0
      CFLAGS += -DuECC_SUPPORTS_secp256r1=1
      CFLAGS += -DuECC_SUPPORT_COMPRESSED_POINT=0
      CFLAGS += -DWITH_ES256
    else #With EDDSA25519
      MODULES += os/net/app-layer/coap/oscore-support/monocypher 
      CFLAGS += -DWATCHDOG_CONF_ENABLE=0
      CFLAGS += -DCC2538_CONF_STACK_SIZE=1000 #Increase stack size
      CFLAGS += -DLPM_CONF_MAX_PM=1 #Disable PM2 to increase available RAM
      CFLAGS += -DWITH_ED25519
    endif # MAKE_WITH_ES256
  endif #MAKE_WITH_HW_CRYPTO
  endif #Zoul

  #SW Crypto configurations for Native 
  ifeq ($(TARGET), native)
    MODULES += os/net/security/tinydtls/sha2
    CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
    
    ifeq ($(strip $(MAKE_WITH_ES256)),1)
    #uECC software configuration.
      MODULES += os/net/app-layer/coap/oscore-support/uecc 
      CFLAGS += -DWATCHDOG_CONF_ENABLE=0
      CFLAGS += -DuECC_PLATFORM=uECC_x86
      CFLAGS += -DuECC_ASM=uECC_asm_fast
      CFLAGS += -DuECC_SQUARE_FUNC=1
      CFLAGS += -DuECC_OPTIMIZATION_LEVEL=3
      CFLAGS += -DuECC_SUPPORTS_secp160r1=0
      CFLAGS += -DuECC_SUPPORTS_secp192r1=0
      CFLAGS += -DuECC_SUPPORTS_secp224r1=0
      CFLAGS += -DuECC_SUPPORTS_secp256k1=0
      CFLAGS += -DuECC_SUPPORTS_secp256r1=1
      CFLAGS += -DuECC_SUPPORT_COMPRESSED_POINT=0
      CFLAGS += -DWITH_ES256
    else #With EDDSA25519
      MODULES += os/net/app-layer/coap/oscore-support/monocypher 
      CFLAGS += -DWITH_ED25519
    endif # MAKE_WITH_ES256
  endif
endif #MAKE_WITH_OSCORE
endif
