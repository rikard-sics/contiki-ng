MAKE_WITH_DTLS ?= 0
MAKE_WITH_OSCORE ?= 0
MAKE_WITH_GROUPCOM ?= 0
MAKE_WITH_HW_CRYPTO ?= 0

ifeq ($(MAKE_WITH_OSCORE),1)

 TINYDTLS_PATH := os/net/security/tinydtls
 NANOCBOR_PATH := os/lib/nanocbor
 ifeq (${wildcard $(CONTIKI)/$(TINYDTLS_PATH)/Makefile},)
  ${error Could not find the tinyDTLS submodule. Please run "git submodule update --init" and try again}
 endif

 ifeq (${wildcard $(CONTIKI)/$(NANOCBOR_PATH)/Makefile},)
  ${error Could not find the nanoCBOR submodule. Please run "git submodule update --init" and try again}
 endif

 MODULES += $(NANOCBOR_PATH)/src $(NANOCBOR_PATH)/include
 CFLAGS += -DNANOCBOR_BYTEORDER_HEADER=\"nanocbor-endian-helper.h\"


 MODULES += $(TINYDTLS_PATH)/sha2
 CFLAGS += -DSHA2_USE_INTTYPES_H -DWITH_SHA256 -DHAVE_ASSERT_H
 
 CFLAGS += -DWITH_OSCORE=1
 MODULES += os/net/app-layer/coap/oscore-support



else ifeq ($(MAKE_WITH_DTLS),1)

 TINYDTLS_PATH := os/net/security/tinydtls

 ifeq (${wildcard $(CONTIKI)/$(TINYDTLS_PATH)/Makefile},)
  ${error Could not find the tinyDTLS submodule. Please run "git submodule update --init" and try again}
 endif

 CFLAGS += -DWITH_DTLS=1

 MODULES += os/net/app-layer/coap/tinydtls-support
 MODULES += $(TINYDTLS_PATH) ${addprefix $(TINYDTLS_PATH)/,aes sha2 ecc}

 MAKE_COAP_DTLS_KEYSTORE_NONE   := 0
 MAKE_COAP_DTLS_KEYSTORE_SIMPLE := 1
 MAKE_COAP_DTLS_KEYSTORE_LWM2M  := 2

 MAKE_COAP_DTLS_KEYSTORE ?= MAKE_COAP_DTLS_KEYSTORE_LWM2M

 ifeq ($(MAKE_COAP_DTLS_KEYSTORE),MAKE_COAP_DTLS_KEYSTORE_SIMPLE)
  CFLAGS += -DCOAP_DTLS_KEYSTORE_CONF_WITH_SIMPLE=1
 else ifeq ($(MAKE_COAP_DTLS_KEYSTORE),MAKE_COAP_DTLS_KEYSTORE_LWM2M)
  CFLAGS += -DCOAP_DTLS_KEYSTORE_CONF_WITH_LWM2M=1
 else ifeq ($(MAKE_COAP_DTLS_KEYSTORE),MAKE_COAP_DTLS_KEYSTORE_NONE)
  # No C flag needed for no keystore
 else
  ${error Unsupported CoAP DTLS keystore: $(MAKE_COAP_DTLS_KEYSTORE)}
 endif
endif 


ifeq ($(MAKE_WITH_GROUPCOM),1)
  CFLAGS += -DWITH_GROUPCOM=1
 
  CFLAGS += -DSW_ECDSA=1
  
  #HW/SW Crypto configurations for Simpleink 
  ifeq ($(TARGET), simplelink)
  ifeq ($(MAKE_WITH_HW_CRYPTO),1)
    CFLAGS += -DOSCORE_WITH_HW_CRYPTO=1
    MODULES += arch/cpu/simplelink-cc13xx-cc26xx/lib/coresdk_cc13xx_cc26xx/source/ti/devices/cc13x2_cc26x2/
    MODULES += arch/cpu/simplelink-cc13xx-cc26xx/lib/coresdk_cc13xx_cc26xx/source
  else  #With SW Crypto
    #Use software AES-CCM implementation.
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    
    #uECC software configuration.
    MODULES += os/net/app-layer/coap/oscore-support/uecc 
    CFLAGS += -DWATCHDOG_CONF_ENABLE=0
    CFLAGS += -DuECC_PLATFORM=uECC_arm
    CFLAGS += -DuECC_CURVE=uECC_secp256r1
  endif #MAKE_WITH_HW_CRYPTO
  endif #Simpleink
 
  #HW/SW Crypto configurations for Zoul 
  ifeq ($(TARGET), zoul)
  ifeq ($(MAKE_WITH_HW_CRYPTO),1)
    CFLAGS += -DOSCORE_WITH_HW_CRYPTO=1
    #Force Zoul to use HW crypto
    CFLAGS += -DCCM_STAR_CONF=cc2538_ccm_star_driver
  else  #With SW Crypto
    #Force Zoul to use SW crypto
    CFLAGS += -DCCM_STAR_CONF=ccm_star_driver
    
    #uECC software configuration.
    MODULES += os/net/app-layer/coap/oscore-support/uecc 
    CFLAGS += -DWATCHDOG_CONF_ENABLE=0
    CFLAGS += -DuECC_PLATFORM=uECC_arm
    CFLAGS += -DuECC_CURVE=uECC_secp256r1
  endif #MAKE_WITH_HW_CRYPTO
  endif #Zoul

  #SW Crypto configurations for Native 
  ifeq ($(TARGET), native)
    MODULES += os/net/app-layer/coap/oscore-support/uecc 
    CFLAGS += -DuECC_PLATFORM=uECC_x86_64
    CFLAGS += -DuECC_CURVE=uECC_secp256r1
  endif

endif
